# This is a GitLab CI configuration to build the project as a docker image
# The file is generic enough to be dropped in a project containing a working Dockerfile
# Author: PARTH DABHI

image:
  name: docker/compose:1.26.2
  entrypoint: [""]

# Use this if your GitLab runner does not use socket binding
services:
  - docker:dind

stages:
  - build
  # - test
  - deploy

variables:
  # When using dind service, we need to instruct docker, to talk with
  # the daemon started inside of the service. The daemon is available
  # with a network connection instead of the default
  # /var/run/docker.sock socket. Docker 19.03 does this automatically
  # by setting the DOCKER_HOST in
  # https://github.com/docker-library/docker/blob/d45051476babc297257df490d22cbd806f1b11e4/19.03/docker-entrypoint.sh#L23-L29
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services.
  #
  # Note that if you're using GitLab Runner 12.7 or earlier with the Kubernetes executor and Kubernetes 1.6 or earlier,
  # the variable must be set to tcp://localhost:2376 because of how the
  # Kubernetes executor connects services to the job container
  # DOCKER_HOST: tcp://localhost:2376
  #
  # Specify to Docker where to create the certificates, Docker will
  # create them automatically on boot, and will create
  # `/certs/client` that will be shared between the service and job
  # container, thanks to volume mount from config.toml
  # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
  # DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  # TEST_TAG: '$CI_BUILD_REF'
  # RELEASE_TAG: 'latest'
  # CONTAINER_TAG_IMAGE: $CI_REGISTRY_IMAGE/web:$CI_COMMIT_TAG
  # CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/web:$CI_COMMIT_REF_SLUG
  CONTAINER_BUILD_IMAGE: $CI_REGISTRY_IMAGE/web:$CI_COMMIT_SHORT_SHA
  CONTAINER_DEV_IMAGE: $CI_REGISTRY_IMAGE/web:dev
  CONTAINER_STAGING_IMAGE: $CI_REGISTRY_IMAGE/web:staging
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE/web:latest

before_script:
  - apk add --no-cache openssh-client bash
  - echo $CI_REGISTRY
  - echo $CI_REGISTRY_USER
  - echo $CI_JOB_TOKEN
  - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY

build_dev:
  stage: build
  tags:
    - docker
  only:
    - dev
  when: on_success
  script:
    - printenv
    - echo $CI_BUILD_REF
    - echo $CI_BUILD_REF_SLUG
    - echo $IMAGE
    - echo $CONTAINER_BUILD_IMAGE
    - echo $CONTAINER_DEV_IMAGE
    - docker build --pull -t $CONTAINER_BUILD_IMAGE -f Dockerfile.dev .
    - docker push $CONTAINER_BUILD_IMAGE
    - docker tag $CONTAINER_BUILD_IMAGE $CONTAINER_DEV_IMAGE
    - docker push $CONTAINER_DEV_IMAGE
    - docker images

build_staging:
  stage: build
  tags:
    - docker
  only:
    - staging
  when: on_success
  script:
    # - printenv
    - docker build --pull -t $CONTAINER_BUILD_IMAGE -f Dockerfile.staging .
    - docker push $CONTAINER_BUILD_IMAGE
    - docker tag $CONTAINER_BUILD_IMAGE $CONTAINER_STAGING_IMAGE
    - docker push $CONTAINER_STAGING_IMAGE
    - docker images

build_prod:
  stage: build
  tags:
    - docker
  only:
    - master
  when: manual
  script:
    # - printenv
    # - echo $CI_BUILD_REF
    # - echo $CI_BUILD_REF_SLUG
    # - echo $IMAGE
    # - echo $CONTAINER_BUILD_IMAGE
    # - echo $CONTAINER_RELEASE_IMAGE
    # - echo $WEB_IMAGE
    # - echo $NGINX_IMAGE
    # - docker pull $WEB_IMAGE || true
    # - docker pull $NGINX_IMAGE || true
    # - docker images
    # 
    # - docker build --pull --cache-from $CONTAINER_BUILD_IMAGE
    - docker build --pull -t $CONTAINER_BUILD_IMAGE -f Dockerfile.prod .
    - docker push $CONTAINER_BUILD_IMAGE
    - docker tag $CONTAINER_BUILD_IMAGE $CONTAINER_RELEASE_IMAGE
    - docker push $CONTAINER_RELEASE_IMAGE
    - docker images

trigger_deploy_dev:
  stage: deploy
  tags:
    - docker
  only:
    - dev
  # when: manual
  before_script:
    - apk add --update curl
  script:
    - "curl -X POST -F token=2e926bde8ba6519ee0d79a0887abc9 -F ref=dev -F variables[TRIGGER_SOURCE]=rapi https://gitlab.com/api/v4/projects/23979139/trigger/pipeline"
    - echo "Trigger finish"

trigger_deploy_staging:
  stage: deploy
  tags:
    - docker
  only:
    - staging
  when: manual
  before_script:
    - apk add --update curl
  script:
    - "curl -X POST -F token=2e926bde8ba6519ee0d79a0887abc9 -F ref=staging -F variables[TRIGGER_SOURCE]=rapi https://gitlab.com/api/v4/projects/23979139/trigger/pipeline"
    - echo "Trigger finish"

trigger_deploy_prod:
  stage: deploy
  tags:
    - docker
  only:
    - master
  when: manual
  script:
    - echo "test" 
